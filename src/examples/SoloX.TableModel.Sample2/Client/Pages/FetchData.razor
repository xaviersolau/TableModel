@page "/fetchdata"
@using SoloX.TableModel.Sample2.Shared
@using SoloX.TableModel.Impl

@inject ITableDataRepository TableDataRepository
@inject ITableStructureRepository TableStructureRepository

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

    <EditForm Model="@this" OnValidSubmit="@HandleValidSubmit">

        <InputText id="name" @bind-Value="name" />

        <button type="submit">Submit</button>
    </EditForm>

@if (loading)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Forcast count: @forecastCount</p>

    <div style="overflow:auto; height:800px">
        <table class="table">
            <thead>
                <tr>
                    @foreach(var col in tableStructure.Columns)
                    {
                        @tableDecorator.DecorateHeader(col);
                    }
                </tr>
            </thead>
            <tbody>
                <Virtualize ItemsProvider="@GetItems" OverscanCount="50" >
                    <tr>
                        @foreach(var col in tableStructure.Columns)
                        {
                            @tableDecorator.Decorate(col, @context);
                        }
                    </tr>
                </Virtualize>
            </tbody>
        </table>
    </div>
}

@code {
    private ITableStructure<WeatherForecast> tableStructure;
    private ITableDecorator<WeatherForecast, MarkupString> tableDecorator;

    private ITableData<WeatherForecast> tableData;
    private ITableFilter<WeatherForecast> tableFilter;

    private bool loading = true;

    private string name;
    private int forecastCount;

    protected override async Task OnInitializedAsync()
    {
        await LoadStructure();
        await LoadData();
    }

    private async Task HandleValidSubmit()
    {
        await LoadData();
    }

    private async Task LoadStructure()
    {
        tableStructure = await TableStructureRepository.GetTableStructureAsync<WeatherForecast>();
        tableDecorator = await TableStructureRepository.GetTableDecoratorAsync<WeatherForecast, MarkupString>("HTML");

        tableData = await TableDataRepository.GetTableDataAsync<WeatherForecast>();
    }

    private async Task LoadData()
    {
        loading = true;

        tableFilter = new TableFilter<WeatherForecast>();

        if (!string.IsNullOrEmpty(this.name))
        {
            tableFilter.Register(wf => wf.Summary, v => v.ToLower().Contains(this.name.ToLower()));
        }

        forecastCount = await tableData.GetDataCountAsync(tableFilter);

        loading = false;
    }

    private async ValueTask<ItemsProviderResult<WeatherForecast>> GetItems(ItemsProviderRequest request)
    {
        var forecasts = await tableData.GetDataPageAsync(tableFilter, request.StartIndex, request.Count);

        return new ItemsProviderResult<WeatherForecast>(forecasts, forecastCount);
    }
}
